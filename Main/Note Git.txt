                                         Git Local

Cấu trúc của một Repo: Con trỏ (Head) ==> Branch chính ==> Commit ==> Nhánh phụ => Commit phụ 
Quá trình Commit     : Working Directory ==> Changes (Unstaged) ==> Staged (Index) ==> Commit
Các Space trên Git   : Staged, Changes, Graph, Working Dic 

                                     Các trạng thái của FILE 

| Ký hiệu | Ý nghĩa                                               | Mô tả chi tiết                             |
| ------- | ----------------------------------------------------- | ------------------------------------------ |
| U       | File mới, chưa từng được add                          | Git chưa theo dõi file này                 |
| A       | File mới đã git add                                   | Sẽ được commit và chưa có vấn đề gì        |
| M       | File đã từng commit, nhưng đã bị sửa                  | Cần add lại để commit thay đổi             |
| D       | File đã bị xóa                                        | Git phát hiện file biến mất                |

=======================================================================================================================================================================================================================================================================================================
             
                                        1) Repository
git init
git config --global user.name "Lư Quốc Vinh"
git config --global user.email "vinh762873@gmail.com"

git add " " 
git add .
git commit -m " "                  
git commit -a -m " "   ==> Commit tất cả file đã thay đổi ( Git add . + Git commmit -m " " )    

git status 
git log 
(**) git log --oneline : Xem lịch sử commit ngắn gọn, kèm nhánh hiện tại (HEAD -> ...)
git log --oneline --graph --all --decorate

git branch " "
git checkout -b " " hoặc git switch -c " " : Tạo nhánh và nhảy vào nhánh đó ngay 
(**) git branch -vv : Xem HEAD đang trỏ tới nhánh nào, nhánh nào Behind/Ahead ( Sau/Trước ) remote bao nhiêu commit

=======================================================================================================================================================================================================================================================================================================
                             2) Reset ( Thao tác trên repo bằng commit )
                                          
1. git reset --soft HEAD~1  : Xóa commit, đem hết đống đó vào staged        (    Nếu có trùng file thì ưu tiên  )
2. git reset --mixed HEAD~1 : Xóa commit, đem hết đống đó vào working dic   (             file mới nhất         )
3. git reset --hard HEAD~1  : Xóa commit, không giữ lại trong staged hay working dic nhưng bị trôi nổi muốn tìm lại phải dùng git reset --hard "commit-id"
                                          

(***) Khôi phục Repository về lại trạng thái của 1 commit nào đó:
git reflog                     }      Repository sẽ quay  
git reset --hard "commit-hash" } trở về trạng thái của commit đó 

=======================================================================================================================================================================================================================================================================================================
                               3) Restore ( Thao tác trên wkd bằng commit )

1. git restore <file> : Khôi phục file trong Working dir về lại giống file trong Staged 
2. git restore .      : Khôi phục toàn bộ file               //

3. git restore --source <commit> <file> : Lấy file từ commit chỉ định chép vào Working dir (Ghi)
4. git restore --staged . : Gỡ file khỏi Staged 

=======================================================================================================================================================================================================================================================================================================
                                    4) Rebase 

(**) git checkout Nhanhphu ==> git rebase main ==> commit của Nhanhphu nằm trên commit của nhánh main ( vẫn đang ở trong nhánh Nhanhphu )


(*) git rebase -i <commit> :  Mở danh sách tất cả commit nằm sau commit đó để chỉnh sửa, gộp, xóa, đổi message,…
(**) git rebase -i HEAD~n   :  Mở n commit gần nhất (tính từ HEAD trở về trước) để chỉnh sửa hoặc gộp

| Lệnh                     | Chức năng                                | Dùng khi nào                 |
| ------------------------ | ---------------------------------------- | ---------------------------- |
|  git rebase -i <commit>  | Chỉnh sửa, gộp, xóa các commit phía sau  | Trước khi push để dọn commit |
|  git rebase --continue   | Tiếp tục sau khi fix conflict            | Khi rebase dừng do lỗi       |
|  git rebase --abort      | Hủy quá trình rebase                     | Khi rebase lỗi hoặc muốn bỏ  |
|  git pull --rebase       | Kéo code mà không merge                  | Khi muốn giữ lịch sử gọn     |


Trong git rebase -i lại có:

| Lệnh              | Ý nghĩa                               |
| ----------------- | ------------------------------------- |
|  pick             | Giữ commit như cũ                     |
|  reword           | Sửa message của commit tùy chọn       |
|  edit             | Sửa code của commit tùy chọn          |
|  squash hoặc s    | Gộp commit này vào commit trước       |
|  drop             | Xóa commit đó                         |

=======================================================================================================================================================================================================================================================================================================
                                   5) Cherry pick 

git checkout <branch-muốn-áp-dụng>  }    Git sẽ tạo một commit mới trên nhánh hiện tại với
git cherry-pick <commit-hash>       }       nội dung giống commit gốc, nhưng hash khác.
                            
git cherry-pick <commit-đầu>^..<commit-cuối> ==> Cherry-pick 1 dãy commit 
                                   
=======================================================================================================================================================================================================================================================================================================

                                  6) So sánh Merge / Rebase / Cherry-pick

| Tiêu chí                         | Merge                                                                 | Rebase                                                                            | Cherry-pick                                                             |
| -------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------------------------- | ----------------------------------------------------------------------- |
| Mục đích chính                   | Kết hợp toàn bộ lịch sử của nhánh A vào nhánh B                       | Đưa nhánh A đi “lại gần” lịch sử của nhánh B (giống như viết lại quá khứ)         | Lấy **một hoặc vài commit cụ thể** từ nhánh khác sang nhánh hiện tại    |
| Kết quả                          | Tạo ra **một commit mới (merge commit)** để hợp 2 lịch sử             | Không tạo commit mới — chỉ **đổi lại vị trí cha (parent)** của commit             | Tạo ra **bản sao** của commit được chọn trong nhánh hiện tại            |
| Ảnh hưởng lịch sử                | Giữ nguyên lịch sử 2 nhánh                                            | Viết lại lịch sử → **thay đổi hash commit**                                       | Giữ nguyên lịch sử từng nhánh (chỉ copy commit qua)                     |
| Có thể gây conflict không?       | Có                                                                    | Có                                                                                | Có                                                                      |
| Dùng khi nào?                    | Khi muốn hợp nhánh (feature → main) mà vẫn muốn giữ lịch sử song song | Khi muốn **làm gọn lịch sử**, ví dụ: đưa nhánh feature về sau main để push dễ hơn | Khi chỉ cần **1–2 commit quan trọng** từ nhánh khác mà không merge hết  |
| Có tạo merge commit?             | ✅ Có (trừ fast-forward)                                              |  ❌ Không                                                                         | ❌ Không                                                               |
| Lệnh thường đi kèm               | git merge --continue/--abort                                          | git rebase --continue/--skip/--abort                                              | git cherry-pick --continue/--skip/--abort                               |
| Tác dụng trong dự án thực tế     | Giữ nguyên lịch sử làm việc, rõ ràng ai merge ai                      | Lịch sử gọn, dễ đọc hơn (linear)                                                  | Dễ lấy fix hoặc tính năng nhỏ từ nhánh khác mà không ảnh hưởng tổng thể |
| Có tạo merge commit không?	   |✅ Có (nếu non–fast-forward)	                                          |❌ Không (trừ khi rebase gặp merge commit)	                                     |❌ Không                                                                |
| Có thể gây conflict không?	   |✅ Có (nếu hai nhánh sửa cùng dòng code)	                              |✅ Có (khi áp lại commit lên base mới)	                                         |✅ Có (khi áp commit trùng vùng code)                                   |



| Tên lệnh        | Ẩn dụ                              | Ghi nhớ ngắn                              |
| --------------- | ---------------------------------- | ----------------------------------------- |
| Merge           | “Gộp hai con đường lại một”        | Có thể tạo *merge commit*, không đổi hash |
| Rebase          | “Dời nhánh này lên đầu dòng chính” | Viết lại lịch sử → đổi hash               |
| Cherry-pick     | “Hái chọn commit mình muốn”        | Copy commit → tạo hash mới                |

==> Cả 3 đều dùng được --continue, --abort, --skip do cả 3 đều là Multi-step process (Quy trình nhiều bước)


=======================================================================================================================================================================================================================================================================================================

                                    7) Nhánh

git checkout <commit-hash>    } Tạo nhánh từ commit
git branch " "                }       cũ hơn

git branch -m <old-name> <new-name>   ==> Đổi tên nhánh mà không đứng ở đó

Xóa nhánh Local:
git branch -d branch-name    ==> Xóa an toàn, Git sẽ thông báo nếu nhánh đó chưa được merge vào nhánh khác.
git branch -D branch-name    ==> Xóa luôn, kể cả khi chưa merge.
 
Xóa nhánh Remote: 
git push origin --delete <branch-name> : Xóa nhánh remote


Đăng nhánh lên remote và theo dõi nhánh đó (-u) :  git push -u origin Nhanh1
Push ghi đè local lên nhánh remote              :  git push origin Nhanh1 --force 

=========================================================================================================================================================================================================================================================================================================
                        8) Những lệnh để xem thông tin thông dụng trong Git 

git status                      : thông tin của local và remote, nhánh nào trước/sau nhánh nào bao nhiêu commit   
git log --oneline               : xem thông tin commit ngắn gọn trên 1 dòng
git log --oneline --graph --all : xem các commit dưới dạng biểu đồ 
git branch -vv                  : xem commit mới nhất của mọi branch và xem nhánh nào đang theo dõi nhánh nào 
git reflog                      : xem các bước di chuyển của HEAD 

==========================================================================================================================================================================================================================================================================================================
                                9) Lặt vặt 

git log --oneline --graph --all --decorate

| Option       | Chức năng                                                                  |
| ------------ | -------------------------------------------------------------------------- |
| --oneline    | Hiển thị mỗi commit **1 dòng**, gồm **hash ngắn + message**, nhìn gọn.     |
| --graph      | Vẽ **cây nhánh ASCII**, thể hiện nhánh tách, merge, thứ tự commit.         |
| --all        | Hiển thị **tất cả commit của mọi nhánh** (local + remote-tracking branch). |
| --decorate   | Hiển thị **tên nhánh, tag, HEAD** gắn với mỗi commit.                      |


git tag : tương đương như tên dễ nhớ của một hash-commit 
git tag <name-tag> <hash-commit>  ==> VD: git tag V1.0 b7c1e84
git checkout V1.0


                     Amend
                                          
git commit --amend -m " "  ==> Đổi tên commit mới nhất     
  
git add file.txt   }
                   } ==> Bổ sung file vào commit trước đó     
git commit --amend }

                                                                Fork 

| Tiêu chí                                      |  Fork                                                           | Clone (HTTPS)                                           |
|---------------------------------------------- |--------------------------------------------------------------   |-------------------------------------------------------- |
| Tạo ra cái gì                                 | Tạo bản sao repo trên tài khoản GitHub                          | Tạo bản sao repo trong máy tính local                   |
| Mục đích chính                                | Dùng để đóng góp cho dự án người khác (bằng Pull Request)       | Dùng để làm việc trong local, code, test, v.v.          |
| Vị trí lưu trữ sau khi thực hiện              | Repo fork nằm trên GitHub của mày                               | Repo clone nằm trong ổ đĩa máy tính của mày             |
| Có liên hệ với repo gốc không?                | Có – GitHub tự ghi nhớ repo gốc để sau này gửi Pull Request     | Không – chỉ là bản sao, Git không biết repo gốc là gì   |
| Có thể cập nhật thay đổi từ repo gốc không?   | Có thể (qua giao diện hoặc dòng lệnh)                           | Không (trừ khi mày thêm remote upstream thủ công)       |
| Khi push code lên                             | Push lên repo fork của mày trên GitHub                          | Push lên repo mà mày clone từ nó (tùy URL)              |
| Ai thường dùng?                               | Người muốn đóng góp open-source, làm việc nhóm qua GitHub       | Người muốn lấy code về local để học hoặc thử nghiệm     |



============================================================================================================================================================================================================================================================================================================
                                        10) Lí thuyết

1) Detached Head: 
Detached HEAD nghĩa là Git đang trỏ trực tiếp vào một commit cụ thể thay vì trỏ vào một nhánh
Khi ở trạng thái này, nếu tạo thêm 1 commit mới thì commit đó sẽ “trôi nổi”, không gắn với nhánh nào,
dễ bị mất nếu không được gắn lại vào nhánh nào đó.

==> Thay vì dùng Detached HEAD
thì hoàn toàn có thể tạo ra một branch ở chỗ commit đó rồi làm việc trên branch đó, xong rồi thì xóa branch bằng git branch -D " " 
Kết luận: Điều này sẽ tránh rối rắm và an toàn hơn, vì sẽ luôn làm việc trên branch, không lo mất commit.


2) Cấu trúc Git: Nhánh chính => Commit => Nhánh phụ => Commit 
git push -u origin Nhanhphu => Nhanhphu ( Local ) đăng lên và theo dõi ( Upstream / Tracking ) Nhanhphu remote ( Nhanhphu/origin ) ==> Lần sau muốn push commit lên nhánh đó chỉ cần git push
nếu không có -u thì lần sau git push thì git sẽ báo lỗi không biết push lên đâu 

3) 3 Loại Merge                                 
Fast Foward Merge : Nhánh main không có thay đổi gì kể từ khi tách ra nhánh Feature đến khi Merge nhánh Feature lại vào ==> Merge Feature vào main và di chuyển HEAD đến commit mới nhất
3 way merge       : Nhánh main có thêm commit kể từ khi tách ra nhánh Feature đến khi Merge lại vào                     ==>                            // và tự tạo thêm 1 commit tên là Merge branch " " ( Để thấy rõ commit đó được tạo ra từ nhánh cha nào )
Conflict          : Có sự trùng nhau dẫn đến Xung đột giữa các file  

4) Git : Ctrl Shift G 
Editor
_Nhấn i (Insert) để chỉnh sửa trong Editor 
_Nhấn Esc để thoát chế độ Insert 
_Nhấn :wq để thoát chế độ Editor 
                                  

=============================================================================================================================================================================================================================================================================================================
        
                                          11) Git Remote 
 
git clone <url>                          : Clone repo remote về thành repo local    ( Dùng khi chưa có repo local )
git remote add <origin> <url>            : Thêm remote mới                       ( Dùng khi đã có repo sẵn trong local )
git remote -vv                           : Xem thông tin remote 
git remote remove <origin>               : Xóa kết nối với remote
git remote rename <old_name> <new_name>  : Đổi tên remote


git fetch : Xem những thay đổi của remote so với local
git pull  : git fetch + git merge 
git push <origin> <main>  : Đẩy commit mới của nhánh main (local) lên nhánh main (origin) 


git push -u <origin> <branch>      : Đẩy nhánh mới và thiết lập upstream  ( Nếu không có chữ u thì lần tiếp theo fetch/pull/push sẽ phải khai báo đầy đủ git push <origin> <Branch> )
git branch -u <origin>/<branch>    : Chỉ đổi tracking, không push
git branch --unset-upstream        : Gỡ tracking

(**) git branch -vv                : Xem các nhánh Local đang theo dõi nhánh nào trên Remote 
(**) git log --oneline             : Xem lịch sử commit ngắn gọn, kèm nhánh hiện tại (HEAD -> ...)
(***) git push origin main --force : push nhánh local lên remote theo kiểu ghi đè bắt buột 


Xóa nhánh Remote: 
git push origin --delete <branch-name> : Xóa nhánh remote
 


=================================================================================================================================================================================================================================================================================================================================================================================================================================
                                      12) Chú thích các phần tử của Remote 
origin = remote     

main : nhánh main trên local
origin/main : nhánh main trên origin 

origin/HEAD : HEAD của remote origin, thường trỏ vào nhánh mặc định trên remote 
origin/HEAD -> origin/main = nhánh mặc định trên remote là main

Theo dõi = Upstream = Tracking

=================================================================================================================================================================================================================================================================================================================================================================================================================================
                                      Đọc bảng Graph của một Repository cụ thể 

Commit 11: 	d910568 (HEAD -> main, origin/main, origin/HEAD) Merge branch 'main' of https://github.com/IT-Wzinn/Thumucmoitrenremote
Commit 10: 	aeda910 Add 4.cpp
Commit 9: 	eefc57a Create Fileremote
Commit 8: 	cf5cdfb Merge branch 'Nhanh2'
Commit 7: 	0fa6baf (Nhanh2) Add 3.cpp (Nhanh2)
Commit 6: 	f0a47cf Add 3.cpp (main)
Commit 5: 	8aec152 (origin/Nhanh2) Add 2.cpp (Nhanh1)
Commit 4: 	64ec181 Merge branch 'nhanh1'
Commit 3: 	10cbb24 (origin/nhanh1, nhanh1) Add 1.cpp (Nhanh1)
Commit 2: 	aacd4e6 Add 1.cpp (main)
Commit 1:	a3d447a Commitdautien
 

*   d910568 (HEAD -> main, origin/main, origin/HEAD) Merge branch 'main' of https://github.com/IT-Wzinn/Thumucmoitrenremote
|\  
| * eefc57a Create Fileremote
* | aeda910 Add 4.cpp
|/  
*   cf5cdfb Merge branch 'Nhanh2'
|\  
| * 0fa6baf (Nhanh2) Add 3.cpp (Nhanh2)
* | f0a47cf Add 3.cpp (main)
|/  
* 8aec152 (origin/Nhanh2) Add 2.cpp (Nhanh1)
*   64ec181 Merge branch 'nhanh1'
|\
| * 10cbb24 (origin/nhanh1, nhanh1) Add 1.cpp (Nhanh1)
* | aacd4e6 Add 1.cpp (main)
|/
* a3d447a Commitdautien


Hướng dẫn đọc Graph Repo này:
Commit 1 : Commit gốc đầu tiên để làm việc
Commit 2 : Add 1.cpp (main)   }      Commit 4: Có commit mới sau khi tách nhánh
Commit 3 : Add 1.cpp (nhanh1) }           ==> Rẽ nhánh, tạo Commit merge               

Commit 5 : Add 2.cpp (Nhanh2) }       Không có commit mới sau khi tách nhánh 
                                    ==> Không rẽ nhánh, không tạo Commit merge 


Commit 6 : Add 3.cpp (main)   }              Commit 8: Merge commit, conflict do có đủ 2 yếu tố 
Commit 7 : Add 3.cpp (Nhanh2) }     Có commit mới sau khi tách nhánh, có xung đột dòng trong cùng 1 file 


Commit 9 : Add 4.cpp          }           Commit 11: Muốn push nhưng gặp Non fast Foward ( Commit mới nhất của Local ≠ Remote (Add 4.cpp ≠ Create Fileremote) )
Commit 10 : Create Fileremote }                      ==> Phải pull nhưng khi pull thì cũng có commit mới sau commit chung với nhánh main nên cũng tạo Merge commit rồi mới push tiếp lên 





