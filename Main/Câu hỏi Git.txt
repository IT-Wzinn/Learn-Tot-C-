| Lệnh                           | Chức năng chính                        |
| ------------------------------ | -------------------------------------- |
| `git remote -v`                | Xem URL của remote                     |
| `git remote add origin <url>`  | Thêm remote                            |
| `git fetch --all`              | Lấy toàn bộ dữ liệu từ mọi remote      |
| `git fetch origin branch-name` | Chỉ lấy branch cụ thể                  |
| `git pull --rebase`            | Giữ lịch sử linear, không merge commit |
| `git diff origin/main`         | So sánh code local với remote          |
| `git merge origin/main`        | Hợp nhất thủ công sau fetch            |
| `git log origin/main..HEAD`    | Xem commit local chưa đẩy lên          |




| Nhóm chức năng                         | Lệnh                                           | Mục đích chính                                                 | Bản chất hoạt động                               | Mức độ quan trọng     |
| -------------------------------------- | ---------------------------------------------- | -------------------------------------------------------------- | ------------------------------------------------ | --------------------- |
| **1. Kết nối và kiểm tra remote**      | `git remote -v`                                | Liệt kê danh sách remote và URL                                | Đọc config từ `.git/config`                      | ★★★★★                 |
|                                        | `git remote add <name> <url>`                  | Thêm remote mới                                                | Ghi thông tin remote vào file config             | ★★★★★                 |
|                                        | `git remote remove <name>`                     | Xóa kết nối remote                                             | Xóa entry trong `.git/config`                    | ★★★★☆                 |
|                                        | `git remote rename <old> <new>`                | Đổi tên remote                                                 | Đổi alias trong config                           | ★★☆☆☆                 |
|                                        | `git remote show <name>`                       | Xem chi tiết remote                                            | Hiển thị thông tin ref mapping và fetch          | ★★★☆☆                 |
| **2. Lấy dữ liệu từ remote**           | `git fetch <remote>`                           | Lấy toàn bộ commit/branch/tag mới nhất về local mà không merge | Cập nhật `.git/refs/remotes/` và object database | ★★★★★                 |
|                                        | `git fetch <remote> <branch>`                  | Lấy riêng 1 branch cụ thể                                      | Giúp tiết kiệm dữ liệu                           | ★★★★☆                 |
|                                        | `git pull <remote> <branch>`                   | Vừa fetch vừa merge vào branch hiện tại                        | Tự động hợp nhất commit mới vào working branch   | ★★★★★                 |
|                                        | `git pull --rebase`                            | Giống pull nhưng dùng rebase thay vì merge                     | Giữ lịch sử commit tuyến tính                    | ★★★★★                 |
| **3. Đẩy dữ liệu lên remote**          | `git push <remote> <branch>`                   | Gửi commit local lên remote                                    | Cập nhật ref trên remote                         | ★★★★★                 |
|                                        | `git push -u <remote> <branch>`                | Thiết lập branch theo dõi upstream                             | Tạo liên kết giữa local & remote branch          | ★★★★★                 |
|                                        | `git push --force` / `--force-with-lease`      | Ghi đè lịch sử trên remote                                     | Cập nhật ref bằng cách bỏ qua fast-forward       | ★★★★★ (phải hiểu sâu) |
|                                        | `git push origin --delete <branch>`            | Xóa branch trên remote                                         | Xóa ref tương ứng trên remote                    | ★★★★☆                 |
|                                        | `git push origin <tag>` / `--tags`             | Đẩy tag hoặc toàn bộ tag lên remote                            | Đẩy object tag vào remote                        | ★★★☆☆                 |
| **4. Làm việc với branch trên remote** | `git branch -r`                                | Liệt kê branch trên remote                                     | Hiển thị `refs/remotes/origin/*`                 | ★★★★☆                 |
|                                        | `git branch -a`                                | Liệt kê cả local + remote branch                               | Gộp view cả hai loại ref                         | ★★★☆☆                 |
|                                        | `git checkout -t origin/<branch>`              | Tạo branch local tracking remote branch                        | Liên kết upstream tự động                        | ★★★★★                 |
|                                        | `git branch --set-upstream-to=origin/<branch>` | Gắn branch local với branch remote                             | Thiết lập tracking nếu chưa có                   | ★★★★☆                 |
| **5. Đồng bộ và so sánh**              | `git diff <local>..<remote>/<branch>`          | So sánh khác biệt giữa local và remote                         | So sánh object database giữa 2 ref               | ★★★★☆                 |
|                                        | `git log origin/<branch>..HEAD`                | Xem commit local chưa push                                     | Dựa vào ref HEAD và ref remote                   | ★★★★☆                 |
|                                        | `git log HEAD..origin/<branch>`                | Xem commit remote chưa pull                                    | Ngược lại của trên                               | ★★★★☆                 |
| **6. Tag và release**                  | `git tag`                                      | Liệt kê tag local                                              | Tag là ref trỏ đến commit                        | ★★★☆☆                 |
|                                        | `git push origin <tag>`                        | Đẩy tag cụ thể lên remote                                      | Tạo tag trên remote                              | ★★★☆☆                 |
|                                        | `git push origin --tags`                       | Đẩy toàn bộ tag lên remote                                     | Sync toàn bộ release tag                         | ★★★☆☆                 |
|                                        | `git fetch --tags`                             | Lấy toàn bộ tag từ remote                                      | Cập nhật ref tag                                 | ★★★☆☆                 |
| **7. Khôi phục và bảo toàn dữ liệu**   | `git reflog`                                   | Xem lịch sử HEAD để khôi phục commit mất                       | Dữ liệu chỉ có local, không sync                 | ★★★★★                 |
|                                        | `git fetch --all`                              | Fetch toàn bộ remote                                           | Thu thập mọi ref về local                        | ★★★★☆                 |
|                                        | `git remote prune origin`                      | Xóa ref remote cũ không còn tồn tại                            | Dọn dẹp `refs/remotes/origin`                    | ★★★☆☆                 |
| **8. Làm việc nhiều remote**           | `git remote add upstream <url>`                | Dùng khi fork repo                                             | Thêm remote nguồn gốc                            | ★★★★☆                 |
|                                        | `git fetch upstream`                           | Lấy cập nhật từ repo gốc                                       | Không ảnh hưởng repo chính                       | ★★★★☆                 |
|                                        | `git merge upstream/main`                      | Gộp thay đổi từ repo gốc                                       | Giữ fork cập nhật                                | ★★★★☆                 |



| Tình huống                 | Cách Git biết nhánh nào | Ví dụ lệnh                         |
| -------------------------- | ----------------------- | ---------------------------------- |
| Fetch tất cả nhánh         | Mặc định từ remote      | `git fetch origin`                 |
| Fetch 1 nhánh cụ thể       | Chỉ định tên nhánh      | `git fetch origin dev`             |
| Pull nhánh hiện tại        | HEAD + upstream branch  | `git pull`                         |
| Pull nhánh khác            | Ghi rõ nhánh            | `git pull origin feature/login`    |
| Push nhánh hiện tại        | HEAD + upstream branch  | `git push`                         |
| Push nhánh khác            | Ghi rõ nhánh            | `git push origin feature/login`    |
| Thiết lập upstream lần đầu | Dùng `-u`               | `git push -u origin feature/login` |




| Lệnh                           | Nghĩa                                     | So sánh giữa                        |
| ------------------------------ | ----------------------------------------- | ----------------------------------- |
| `git diff`                     | Xem thay đổi **chưa add**                 | Working directory ↔ Staging area    |
| `git diff --staged`            | Xem thay đổi **đã add nhưng chưa commit** | Staging area ↔ Commit cuối (`HEAD`) |
| `git diff <branch1> <branch2>` | So sánh 2 nhánh                           | Commit mới nhất của từng nhánh      |
| `git diff <hash1> <hash2>`     | So sánh 2 commit cụ thể                   | Commit `<hash1>` ↔ `<hash2>`        |





| Lệnh                          | Mục đích                                                              | Bản chất hoạt động                                                                             |
| ----------------------------- | --------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- |
| `git clone <url>`             | Tạo bản sao repo từ remote về local                                   | Tải toàn bộ lịch sử commit, tạo thư mục mới, gắn luôn remote `origin`.                         |
| `git remote -v`               | Xem remote đang gắn với local                                         | Chỉ liệt kê tên và URL của remote (thường là `origin`).                                        |
| `git remote add origin <url>` | Gắn repo local với remote                                             | Thiết lập liên kết ban đầu giữa local và remote.                                               |
| `git fetch`                   | Lấy dữ liệu mới từ remote về (nhưng **chưa nhập** vào nhánh hiện tại) | Cập nhật các ref của remote (như `origin/main`) trong local. Không động đến working directory. |
| `git pull`                    | Lấy dữ liệu mới **và nhập** vào nhánh hiện tại                        | Thực chất = `fetch` + `merge` (hoặc `rebase` nếu cấu hình).                                    |
| `git push`                    | Đẩy commit từ local lên remote                                        | Gửi commit của nhánh local tương ứng lên remote. Nếu nhánh chưa tồn tại, tạo mới.              |
| `git push -u origin <branch>` | Đẩy nhánh mới và thiết lập tracking                                   | Sau này có thể chỉ cần `git push` / `git pull` không cần ghi `origin <branch>`.                |
| `git branch -r`               | Xem các nhánh remote                                                  | Hiển thị danh sách nhánh đang có trên remote.                                                  |
| `git branch -a`               | Xem cả nhánh local và remote                                          | Gộp cả 2 loại để dễ so sánh.                                                                   |
| `git pull --rebase`           | Kéo commit remote về rồi đặt commit local lên trên                    | Giữ lịch sử sạch, không tạo merge commit thừa.                                                 |
| `git push --force`            | Ghi đè lịch sử remote bằng local                                      | Dùng khi rebase hoặc thay đổi lịch sử commit. Nguy hiểm nếu nhiều người dùng chung repo.       |



git pull là gộp toàn bộ các commit mới nhất trên toàn bộ các nhánh trên remote xuống local hay chỉ 1 nhánh main
git push origin <branch> là đẩy cái nhánh <branch> đó lên origin hả 
git push -u origin <branch> -u để đặt cho nhánh mới là mặc định để cho lần sau pull push khỏi cần thêm origin hay branch nữa nhưng mà lỡ nếu không muốn push lên nhánh đó nữa mà muốn push lên nhánh main thì sao 

Ở câu số 3 t hiểu là nhánh trên local chỉ có thể theo dõi 1 nhánh trên remote, vậy thì nếu đang ở nhánh main mà push cái commit mới lên nhưng quên đổi nhánh đang theo dõi trên remote thì có chuyện gì sẽ xảy ra
Nếu mà git pull thì làm sao git biết được nên pull nhánh nào trên remote về nhánh mình đang đứng ở local 


mặc định thì khi tạo repo thì nhánh mặc định trên remote là nhánh origin/main nên nhánh main dưới local tự động theo dõi thằng main trên remote đó đúng không



nếu sài lệnh git push -u origin <nhánh mới> để push nhánh mới lên remote nhưng không để chữ u thì lúc pull hay push nhánh local này thì git sẽ không biết theo dõi nhánh nào để pull push mà phải ghi đầy đủ là git push origin <Nhánh mới> / git pull origin <Nhánh mới> đúng không


        
Nếu mày muốn tiếp tục rebase → git rebase --continue

Nếu mày muốn hủy rebase → git rebase --abort

Nếu mày muốn bỏ qua commit đang lỗi → git rebase --skip

→ Sau khi hoàn tất một trong ba lệnh đó, Git sẽ tự động trả HEAD về đúng branch (nhanh1), và dòng (no branch, rebasing nhanh1) sẽ biến mất.



Thông báo đó nghĩa là: commit 8736558 (Add 3.cpp) không còn gì để áp dụng nữa — có thể vì mày đã sửa file trùng nội dung trước đó hoặc xóa thay đổi của commit đó trong lúc rebase.

Phân tích theo dòng:

nothing to commit, working tree clean → không có thay đổi mới để commit.

previous cherry-pick is now empty → commit đang áp dụng không có nội dung khác biệt so với trạng thái hiện tại.

Git gợi ý 2 hướng:

Giữ lại commit rỗng → git commit --allow-empty

Bỏ qua commit này → git rebase --skip

✅ Trường hợp thông thường (khi mày không muốn commit rỗng):

git rebase --skip


→ Git sẽ bỏ qua commit Add 3.cpp này và kết thúc rebase, trả nhánh nhanh1 về trạng thái bình thường.



| Trường hợp                  | Có thể xung đột?  | Lý do                                                  |
| --------------------------- | ---------------   | ------------------------------------------------------ |
| **`git pull` hoặc `merge`** | ✅ Có             | Vì hợp nhất 2 nhánh có thay đổi khác nhau              |
| **`git cherry-pick`**       | ✅ Có             | Vì “diff” của commit đó không khớp với mã hiện tại     |
| **`git rebase`**            | ✅ Có             | Vì cũng đang “replay” lại các commit giống cherry-pick |



TH1: Merge nhán feature vào main mà main CHƯA có commit mới kể từ lúc tạo nhánh feature 
thì khi merge feature vào main nó sẽ Fast forward 

TH2: Merge nhán feature vào main mà main  ĐÃ có commit mới kể từ lúc tạo nhánh feature 
thì khi merge feature vào main nó sẽ merge vào sau commit mới của main và tạo thêm 1 Merge commit nữa 






git diff
Hiện ra mấy dòng như:

diff
Sao chép mã
diff --git a/main.cpp b/main.cpp
index 34ac..8d2b 100644
--- a/main.cpp
+++ b/main.cpp
@@ -1,3 +1,4 @@
 int main() {
-    return 0;
+    cout << "Hello";
+    return 0;
 }


non-fast-forward : Có sự khác biệt giữa Local và Remote nên không Push được 







